{"ast":null,"code":"import dayjs from 'dayjs';\nexport function getRemainingTimeUntilMsTimestamp(timestampMs) {\n  const timestampDayJs = dayjs(timestampMs);\n  const nowDayjs = dayjs();\n\n  if (timestampDayJs.isBefore(nowDayjs)) {}\n\n  return {\n    seconds: getRemainingSeconds(nowDayjs, timestampDayJs),\n    minutes: getRemainingMinutes(nowDayjs, timestampDayJs),\n    hours: getRemainingHours(nowDayjs, timestampDayJs),\n    days: getRemainingDays(nowDayjs, timestampDayJs)\n  };\n}\n\nfunction getRemainingSeconds(nowDayjs, timestampDayJs) {\n  const seconds = timestampDayJs.diff(nowDayjs, 'seconds') % 60;\n  return padWithZeros(seconds, 2);\n}\n\nfunction getRemainingMinutes(nowDayjs, timestampDayJs) {\n  const minutes = timestampDayJs.diff(nowDayjs, 'minutes') % 60;\n  return padWithZeros(minutes, 2);\n}\n\nfunction getRemainingHours(nowDayjs, timestampDayJs) {\n  const hours = timestampDayJs.diff(nowDayjs, 'hours') % 24;\n  return padWithZeros(hours, 2);\n}\n\nfunction getRemainingDays(nowDayjs, timestampDayJs) {\n  const days = timestampDayJs.diff(nowDayjs, 'days');\n  return days.toString();\n}\n\nfunction padWithZeros(number, minLength) {\n  const numberString = number.toString();\n  if (numberString.length >= minLength) return numberString;\n  return \"0\".repeat(minLength - numberString.length) + numberString;\n}","map":{"version":3,"sources":["/home/jb101/REACT/0xtime/src/components/CountdownUtils.js"],"names":["dayjs","getRemainingTimeUntilMsTimestamp","timestampMs","timestampDayJs","nowDayjs","isBefore","seconds","getRemainingSeconds","minutes","getRemainingMinutes","hours","getRemainingHours","days","getRemainingDays","diff","padWithZeros","toString","number","minLength","numberString","length","repeat"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,SAASC,gCAAT,CAA0CC,WAA1C,EAAuD;AAC1D,QAAMC,cAAc,GAAGH,KAAK,CAACE,WAAD,CAA5B;AACA,QAAME,QAAQ,GAAGJ,KAAK,EAAtB;;AACA,MAAIG,cAAc,CAACE,QAAf,CAAwBD,QAAxB,CAAJ,EAAuC,CAEtC;;AACD,SAAO;AACHE,IAAAA,OAAO,EAAEC,mBAAmB,CAACH,QAAD,EAAWD,cAAX,CADzB;AAEHK,IAAAA,OAAO,EAAEC,mBAAmB,CAACL,QAAD,EAAWD,cAAX,CAFzB;AAGHO,IAAAA,KAAK,EAAEC,iBAAiB,CAACP,QAAD,EAAWD,cAAX,CAHrB;AAIHS,IAAAA,IAAI,EAAEC,gBAAgB,CAACT,QAAD,EAAWD,cAAX;AAJnB,GAAP;AAMH;;AAED,SAASI,mBAAT,CAA6BH,QAA7B,EAAuCD,cAAvC,EAAuD;AACnD,QAAMG,OAAO,GAAGH,cAAc,CAACW,IAAf,CAAoBV,QAApB,EAA8B,SAA9B,IAA2C,EAA3D;AACA,SAAOW,YAAY,CAACT,OAAD,EAAU,CAAV,CAAnB;AACH;;AAED,SAASG,mBAAT,CAA6BL,QAA7B,EAAuCD,cAAvC,EAAuD;AACnD,QAAMK,OAAO,GAAGL,cAAc,CAACW,IAAf,CAAoBV,QAApB,EAA8B,SAA9B,IAA2C,EAA3D;AACA,SAAOW,YAAY,CAACP,OAAD,EAAU,CAAV,CAAnB;AACH;;AAED,SAASG,iBAAT,CAA2BP,QAA3B,EAAqCD,cAArC,EAAqD;AACjD,QAAMO,KAAK,GAAGP,cAAc,CAACW,IAAf,CAAoBV,QAApB,EAA8B,OAA9B,IAAyC,EAAvD;AACA,SAAOW,YAAY,CAACL,KAAD,EAAQ,CAAR,CAAnB;AACH;;AAED,SAASG,gBAAT,CAA0BT,QAA1B,EAAoCD,cAApC,EAAoD;AAChD,QAAMS,IAAI,GAAGT,cAAc,CAACW,IAAf,CAAoBV,QAApB,EAA8B,MAA9B,CAAb;AACA,SAAOQ,IAAI,CAACI,QAAL,EAAP;AACH;;AAED,SAASD,YAAT,CAAsBE,MAAtB,EAA8BC,SAA9B,EAAyC;AACrC,QAAMC,YAAY,GAAGF,MAAM,CAACD,QAAP,EAArB;AACA,MAAGG,YAAY,CAACC,MAAb,IAAuBF,SAA1B,EAAqC,OAAOC,YAAP;AACrC,SAAO,IAAIE,MAAJ,CAAWH,SAAS,GAAGC,YAAY,CAACC,MAApC,IAA8CD,YAArD;AACH","sourcesContent":["import dayjs from 'dayjs';\n\nexport function getRemainingTimeUntilMsTimestamp(timestampMs) {\n    const timestampDayJs = dayjs(timestampMs);\n    const nowDayjs = dayjs();\n    if (timestampDayJs.isBefore(nowDayjs)) {\n        \n    }\n    return {\n        seconds: getRemainingSeconds(nowDayjs, timestampDayJs),\n        minutes: getRemainingMinutes(nowDayjs, timestampDayJs),\n        hours: getRemainingHours(nowDayjs, timestampDayJs),\n        days: getRemainingDays(nowDayjs, timestampDayJs),\n    }\n}\n\nfunction getRemainingSeconds(nowDayjs, timestampDayJs) {\n    const seconds = timestampDayJs.diff(nowDayjs, 'seconds') % 60;\n    return padWithZeros(seconds, 2);\n}\n\nfunction getRemainingMinutes(nowDayjs, timestampDayJs) {\n    const minutes = timestampDayJs.diff(nowDayjs, 'minutes') % 60;\n    return padWithZeros(minutes, 2);\n}\n\nfunction getRemainingHours(nowDayjs, timestampDayJs) {\n    const hours = timestampDayJs.diff(nowDayjs, 'hours') % 24;\n    return padWithZeros(hours, 2);\n}\n\nfunction getRemainingDays(nowDayjs, timestampDayJs) {\n    const days = timestampDayJs.diff(nowDayjs, 'days');\n    return days.toString();\n}\n\nfunction padWithZeros(number, minLength) {\n    const numberString = number.toString();\n    if(numberString.length >= minLength) return numberString;\n    return \"0\".repeat(minLength - numberString.length) + numberString\n}"]},"metadata":{},"sourceType":"module"}